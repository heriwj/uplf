ACKAGE BODY PKG_ETL_PRSNG_CC is

PROCEDURE PROC_ETL_PRSNG
(
p_stmt_id   IN NUMBER,
p_stmtv_dt  IN VARCHAR2,
p_prdct_id  IN NUMBER,
p_crtd_by   IN VARCHAR2,
p_startv_dt IN VARCHAR2,
p_time      IN VARCHAR2,
p_shdlr_id  IN NUMBER,
p_frqncy    IN VARCHAR2 DEFAULT 'D'
) AS


 /*
  ***************************************************************
   Created by Ashwini Kumar
   For DATA Parsing
  ***************************************************************
 */

v_prcss_id                  CXPRCSXM.IXPRCS%TYPE;
v_prcss_dt                  CXPRCSXM.DXPRCS%TYPE;
p_start_dt                  CXPRCSXDTLS.STXPRSXTM%TYPE;
v_stmt_frm_dt               DATE ;
v_stmt_to_dt                DATE ;

p_stmt_dt                   DATE ;
v_sys_dt                    DATE ;
v_start_dt                  DATE ;
v_end_dt                    DATE ;
v_ttl_accnt_prsd            NUMBER ;
v_total_estamp_cnt          NUMBER ;
v_total_email_estamp_cnt    NUMBER ;
v_total_print_estmp_cnt     NUMBER ;
v_prcss_id_cnt              NUMBER ;
v_ttl_accnt                 NUMBER ;
v_sql_cnt                   NUMBER ;
sql_stmt                    VARCHAR2 (10000);
v_schema                    VARCHAR2 (100);

v_stmt_dt                   VARCHAR2 (100);
v_startv_dt                 VARCHAR2 (100);
v_pkgpcr_nm                 VARCHAR2 (150) := ')PKG_ETL_PRSNG_CC.PROC_ETL_PRSNG_
CC-> ';


v_pkgpcr_cntr               NUMBER := 0;
v_exception_err             NUMBER := 0;

 /*
  ******************************************************************************
******************


    TRUNCATE TABLE DXPRCXERRXDTLS DROP STORAGE;
    TRUNCATE TABLE DXPRCSXFLWXDTLS DROP STORAGE;
    EXEC PKG_ETL_PRSNG_CC.PROC_ETL_PRSNG(2,'08-03-2023',2,'Ashwini','08-03-2023'
,'01:08 PM',138,'D');



ALTER TABLE STG_CREDIT_CARD_DTLS1T ADD IDENTIFIER  VARCHAR2(50);
ALTER TABLE STG_CREDIT_CARD_DTLS1T ADD IDENTIFIER3 VARCHAR2(50);
ALTER TABLE STG_CREDIT_CARD_DTLS1T ADD IDENTIFIERS VARCHAR2(50);

ALTER TABLE STG_CREDIT_CARD_DTLS1 ADD IDENTIFIER  VARCHAR2(50);
ALTER TABLE STG_CREDIT_CARD_DTLS1 ADD IDENTIFIER3 VARCHAR2(50);

ALTER TABLE STG_CREDIT_CARD_DTLS1 ADD IDENTIFIERS VARCHAR2(50);


----- RINGKASAN TAGIHAN -----
select PRINT_DATE,RETAIL_CREDIT_LINE,
AVAILABLE_RETAIL_CREDIT_LINE,DUE_DATE,
AVAILABLE_CASH_CREDIT_LINE,
NO_AMPLOP_WAYBILL,CARD_NUMBER,ACCOUNT_NUMBER,PREVIOUS_BALANCE_SUMMARY,PURCHASE_S
UMMARY,CASH_ADVANCE_SUMMARY,PAYMENT_SUMMARY,

CREDIT_SUMMARY,FEES_AND_INTEREST_SUMMARY,NEW_BALANCE_SUMMARY,PRIMARY_CARD,CARD_T
YPE,PRIMARY_CARD_NO


from DXI_CREDIT_CARD_DTLS
WHERE no_amplop_waybill ='T000085'
AND IXPRCS=1422
AND IXPRDT=2
---AND ACCOUNT_NUMBER = '4423 7401 6350 6019' -- '4241 0300 0096 1001';
;
----- RINGKASAN TREATS Points table -----
select CARD_NUMBER,ACCOUNT_NUMBER,PREVIOUS_BALANCE_BONUS_BUCKS,BONUS_BUCKS,BUCKS
_USED,BONUS_BUCKS_END,PRIMARY_CARD,CARD_TYPE,PRIMARY_CARD_NO

from DXI_CREDIT_CARD_DTLS
WHERE no_amplop_waybill ='T000085'
AND IXPRCS=1422

AND IXPRDT=2
--ACCOUNT_NUMBER ='4423 7401 6350 6019';
;

----- BUNGA DAN TOTAL TRANSAKSI table -----
select CARD_NUMBER,ACCOUNT_NUMBER,PURCHASE_SUMMARY,PURCHASE_CASH_ADVANCE_RATE_MO
NTH,CASH_ADVANCE_SUMMARY,

PURCHASE_CASH_ADVANCE_RATE_YEAR,PRIMARY_CARD,CARD_TYPE,PRIMARY_CARD_NO
from DXI_CREDIT_CARD_DTLS
WHERE no_amplop_waybill ='T000085'
AND IXPRCS=1422
AND IXPRDT=2

--AND ACCOUNT_NUMBER ='4423 7401 6350 6019';


----BUNGA DAN TOTAL TRANSAKSI -----MODIFIED

SELECT
CARD_NUMBER,
ACCOUNT_NUMBER,
PURCHASE_SUMMARY,
CASE WHEN NVL(SUBSTR(PURCHASE_CASH_ADVANCE_RATE_YEAR,1,INSTR(PURCHASE_CASH_ADVAN
CE_RATE_YEAR,'/',1)-1),'N') != 'N'

THEN SUBSTR(PURCHASE_CASH_ADVANCE_RATE_YEAR,1,INSTR(PURCHASE_CASH_ADVANCE_RATE_Y

EAR,'/',1)-1) ||'/ '||

SUBSTR(PURCHASE_CASH_ADVANCE_RATE_MONTH,1,INSTR(PURCHASE_CASH_ADVANCE_RATE_MONTH
,'/',1)-1) ELSE NULL END AS PURCHASE_CASH_ADVANCE_RATE_MONTH,

CASH_ADVANCE_SUMMARY,
CASE WHEN NVL(SUBSTR(PURCHASE_CASH_ADVANCE_RATE_YEAR,INSTR(PURCHASE_CASH_ADVANCE
_RATE_YEAR,'/',1)+2,LENGTH(PURCHASE_CASH_ADVANCE_RATE_YEAR)),'N') != 'N'

THEN SUBSTR(PURCHASE_CASH_ADVANCE_RATE_YEAR,INSTR(PURCHASE_CASH_ADVANCE_RATE_YEA
R,'/',1)+2,LENGTH(PURCHASE_CASH_ADVANCE_RATE_YEAR)) ||'/ '||

SUBSTR(PURCHASE_CASH_ADVANCE_RATE_MONTH,INSTR(PURCHASE_CASH_ADVANCE_RATE_MONTH,'

/',1)+2) ELSE NULL END AS PURCHASE_CASH_ADVANCE_RATE_YEAR,

PRIMARY_CARD,PRIMARY_CARD_NO
FROM STG_CREDIT_CARD_DTLS
WHERE no_amplop_waybill ='T000228' ;
--WHERE ACCOUNT_NUMBER ='4423 7401 6394 5043';

  ******************************************************************************
******************

 */

BEGIN


    v_sys_dt    := SYSDATE;
    v_start_dt  := SYSDATE;
    v_stmt_dt   := p_stmtv_dt || ' ' || p_time;
    p_stmt_dt   := TO_DATE(v_stmt_dt,'DD-MM-YYYY HH:MI AM');
    v_startv_dt := p_startv_dt || ' ' || p_time;
    p_start_dt  := TO_DATE(v_startv_dt,'DD-MM-YYYY HH:MI AM');

    DBMS_OUTPUT.PUT_LINE('v_sys_dt  :-'||TO_CHAR(V_SYS_DT,'DD-MM-YYYY'));
    DBMS_OUTPUT.PUT_LINE('p_stmt_dt :-'|| p_stmt_dt);


    IF v_exception_err = 0 THEN

        BEGIN

        CASE
        WHEN p_frqncy = 'D' OR p_frqncy = 'M' THEN
            SELECT DISTINCT
                   to_char(trunc(trunc(to_date(PRINT_DATE,'DD-MM-YYYY'), 'MM') ,
 'MM'),'DD-MON-YYYY') stmt_frm_dt,

                   to_char(LAST_DAY(to_char(trunc(trunc(to_date(PRINT_DATE,'DD-M
M-YYYY'), 'MM') , 'MM'),'DD-MON-YYYY')),'DD-MON-YYYY') stmt_to_dt

              INTO v_stmt_frm_dt, v_stmt_to_dt
              FROM STG_CREDIT_CARD_DTLS

             WHERE rownum < 2;

        END CASE;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                sql_stmt:='No Data Found from STG_CREDIT_CARD_DTLS for FREQUENCY
 = '||p_frqncy||' :- '||sqlerrm;

                insert into DXPRCXERRXDTLS values(NULL, NULL,NULL, NULL,NULL,sql
_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;

            WHEN OTHERS THEN
                sql_stmt:='EXCEPTION in Select from DISPATCH_MASTER_LDB for FREQ
UENCY = '||p_frqncy||' :- '||sqlerrm;

                insert into DXPRCXERRXDTLS values(NULL, NULL,NULL, NULL,NULL,sql
_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
        END;
    END IF;

    DBMS_OUTPUT.PUT_LINE('Statement From Date :-'|| v_stmt_frm_dt);
    DBMS_OUTPUT.PUT_LINE('Statement To   Date :-'|| v_stmt_to_dt);



    IF v_exception_err = 0 THEN
        BEGIN

            SELECT sys.LOGIN_USER() INTO v_schema from dual;

            v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
            sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'Select Schema From Dual
 -> :- '||sqlerrm;

            INSERT INTO DXPRCXERRXDTLS VALUES(v_prcss_id, v_prcss_dt,p_stmt_id,
p_stmt_dt,p_prdct_id,sql_stmt,TO_CHAR(SYSDATE,'DD-MM-YYYY HH:MI:SS AM'));



        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                sql_stmt:='No Data Found for sys.LOGIN_USER() :- '||sqlerrm;
                insert into DXPRCXERRXDTLS values(NULL, NULL,NULL, NULL,NULL,sql
_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
            WHEN OTHERS THEN
                sql_stmt:='EXCEPTION in Select for sys.LOGIN_USER() :- '||sqlerr
m;


                insert into DXPRCXERRXDTLS values(NULL, NULL,NULL, NULL,NULL,sql
_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
        END;
    END IF;

    IF v_exception_err = 0 THEN
        BEGIN

              SELECT COUNT(IXPRCS) INTO v_prcss_id_cnt
                FROM CXPRCSXM
               WHERE IXSTMT = p_stmt_id

                 AND IXPRDT = p_prdct_id
                 AND FXPRCSXPRS = 'R'
                 AND BXCTD = p_crtd_by;

              IF (v_prcss_id_cnt > 0) THEN
                 UPDATE CXPRCSXM SET FXPRCSXPRS = 'F'
               WHERE IXSTMT = p_stmt_id
                 AND IXPRDT = p_prdct_id
                 AND FXPRCSXPRS = 'R'
                 AND BXCTD = p_crtd_by;
              END IF;

            v_pkgpcr_cntr := v_pkgpcr_cntr + 1;

            sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'UPDATE CXPRCSXM SET FXP
RCSXPRS = ''F'' WHERE  FXPRCSXPRS = ''R'' -> :- '||sqlerrm;

            INSERT INTO DXPRCXERRXDTLS VALUES(v_prcss_id, v_prcss_dt,p_stmt_id,
p_stmt_dt,p_prdct_id,sql_stmt,TO_CHAR(SYSDATE,'DD-MM-YYYY HH:MI:SS AM'));


        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                sql_stmt:='No Data Found for UPDATE CXPRCSXM SET FXPRCSXPRS = ''
F'' WHERE  FXPRCSXPRS = ''R'' :- '||sqlerrm;

                insert into DXPRCXERRXDTLS values(NULL, NULL,NULL, NULL,NULL,sql

_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
            WHEN OTHERS THEN
                sql_stmt:='EXCEPTION in UPDATE CXPRCSXM SET FXPRCSXPRS = ''F'' W
HERE  FXPRCSXPRS = ''R'' :- '||sqlerrm;

                insert into DXPRCXERRXDTLS values(NULL, NULL,NULL, NULL,NULL,sql
_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
        END;
    END IF;



    IF v_exception_err = 0 THEN
        BEGIN

         INSERT INTO DXPRCSXFLWXDTLS
                (IXPRCS, DXPRCS, IXSTMT, DXSTMT, IXPRDT, DXFRMXSTMT, DXTOXSTMT,
DXSTRTXPRCS)

         VALUES (v_prcss_id, v_prcss_dt, p_stmt_id, p_stmt_dt, p_prdct_id, v_stm
t_frm_dt, v_stmt_to_dt, v_start_dt);

         COMMIT;

         EXCEPTION
            WHEN NO_DATA_FOUND THEN
                sql_stmt:='No Data Found for DXPRCSXFLWXDTLS :- '||sqlerrm;
                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
            WHEN OTHERS THEN
                sql_stmt:='EXCEPTION in Insert for DXPRCSXFLWXDTLS :- '||sqlerrm
;

                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));


                v_exception_err := -1;
        END;
    END IF;

    IF v_exception_err = 0 THEN
        BEGIN

            INSERT INTO CXPRCSXM  (IXSTMT, DXSTMT, IXPRDT, FXPRCSXPRS, TXPRCS, I
XMXSHDLR, DXPRCS, DXCTD, BXCTD, STXDT, STXSTXDT, STXENXDT)

            VALUES (p_stmt_id, p_stmt_dt, p_prdct_id, 'R', p_time, p_shdlr_id, T
RUNC(v_sys_dt), v_sys_dt, p_crtd_by, v_start_dt, v_stmt_frm_dt, v_stmt_to_dt);



            v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
            sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'Insert in CXPRCSXM for
procss_id Creation -> :- '||sqlerrm;

            INSERT INTO DXPRCXERRXDTLS VALUES(v_prcss_id, v_prcss_dt,p_stmt_id,
p_stmt_dt,p_prdct_id,sql_stmt,TO_CHAR(SYSDATE,'DD-MM-YYYY HH:MI:SS AM'));


        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                sql_stmt:='No Data Found for CXPRCSXM :- '||sqlerrm;

                INSERT INTO DXPRCXERRXDTLS VALUES(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,TO_CHAR(SYSDATE,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
            WHEN OTHERS THEN
                sql_stmt:='EXCEPTION in Insert for CXPRCSXM :- '||sqlerrm;
                INSERT INTO DXPRCXERRXDTLS VALUES(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,TO_CHAR(SYSDATE,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
        END;
    END IF;


    IF v_exception_err = 0 THEN
        BEGIN

              SELECT IXPRCS, DXPRCS INTO v_prcss_id, v_prcss_dt
                FROM CXPRCSXM
               WHERE IXSTMT = p_stmt_id
                 AND DXSTMT = p_stmt_dt
                 AND IXPRDT = p_prdct_id
                 AND FXPRCSXPRS = 'R'
                 AND BXCTD = p_crtd_by;

            v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
            sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'Selection of procss_id

after creation from CXPRCSXM -> :- '||sqlerrm;

            INSERT INTO DXPRCXERRXDTLS VALUES(v_prcss_id, v_prcss_dt,p_stmt_id,
p_stmt_dt,p_prdct_id,sql_stmt,TO_CHAR(SYSDATE,'DD-MM-YYYY HH:MI:SS AM'));


        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                sql_stmt:='No Data Found for CXPRCSXM :- '||sqlerrm;
                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;

            WHEN OTHERS THEN
                sql_stmt:='EXCEPTION in Select for CXPRCSXM :- '||sqlerrm;
                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
        END;
    END IF;

    IF v_exception_err = 0 THEN
        BEGIN

            CASE

            WHEN p_frqncy = 'D' OR p_frqncy = 'M' THEN

                SELECT COUNT((rb.ACCOUNT_NUMBER)) INTO v_ttl_accnt
                  FROM STG_CREDIT_CARD_DTLS rb
                 WHERE rb.PRIMARY_CARD = 1  ;

             END CASE;

             If NVL(v_ttl_accnt,0)!=0 THEN

                v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
                sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'Select total record
 count for STG_CREDIT_CARD_DTLS - ACCOUNT_NUMBER -> :- '|| NVL(v_ttl_accnt,0) ||

 CHR(32) ||sqlerrm;

                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

             ELSE
                sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'No Data Found for S
TG_CREDIT_CARD_DTLS - ACCOUNT_NUMBER :- '|| NVL(v_ttl_accnt,0) || CHR(32) ||sqle
rrm;

                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));


                v_exception_err := -1;
             END IF;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                sql_stmt:='No Data Found for STG_CREDIT_CARD_DTLS - ACCOUNT_NUMB
ER :- '||sqlerrm;

                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
            WHEN OTHERS THEN

                sql_stmt:='EXCEPTION in Select total record count for STG_CREDIT
_CARD_DTLS - ACCOUNT_NUMBER :- '||sqlerrm;

                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
        END;
        IF v_exception_err = 0 AND NVL(v_ttl_accnt,0)!=0 THEN
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL1 = 'CXPRCSXM Running', DXSTRTXPR
CS = v_start_dt  WHERE IXPRCS = v_prcss_id ;

        ELSE

            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL1 = 'CXPRCSXM Parsing Error', DXS
TRTXPRCS = v_start_dt  WHERE IXPRCS = v_prcss_id ;

        END IF;
        COMMIT;
    END IF;


IF((NVL(v_ttl_accnt,0)!=0) AND (NVL(v_prcss_id,0)!=0)) THEN

    IF v_exception_err = 0 THEN
        UPDATE DXPRCSXFLWXDTLS SET STTSXTBL2 = 'CXPRCSXDTLS Running' WHERE IXPRC
S = v_prcss_id ;


        COMMIT;

        BEGIN
            -- Inserting / Updating Process values('ERROR' Details - CXPRCSXDTLS



            INSERT INTO CXPRCSXDTLS
             (IXPRCS,ACNTXTTL,PRSDXACNTXTTL,STXPRSXTM,DXCTD,BXCTD)
            VALUES
             (v_prcss_id,v_ttl_accnt,0,p_start_dt,v_sys_dt,p_crtd_by);


            v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
            sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'Insert into CXPRCSXDTLS
 according to prcss_id -> :- '||sqlerrm;

            insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_id,
p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                sql_stmt:='No Data Found for CXPRCSXDTLS :- '||sqlerrm;
                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));


                v_exception_err := -1;
            WHEN OTHERS THEN
                sql_stmt:='EXCEPTION in Insert for CXPRCSXDTLS :- '||sqlerrm;
                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
        END;
    END IF;

    IF v_exception_err = 0 THEN
        UPDATE DXPRCSXFLWXDTLS SET STTSXTBL4 = 'DXCSTMRXM Running' WHERE IXPRCS
= v_prcss_id ;


        COMMIT;
        BEGIN
            MERGE /*+ parallel(DXCSTMRXM,10) */  INTO DXCSTMRXM cm
                 USING (
                      SELECT /*+ parallel (cd,10) */ DISTINCT
                            cd.customer_number as crn,
                            cd.customer_number as cust_id,
                            cd.email           as ixem,
                            cd.dob             as dob,
                            CASE
                            WHEN NVL(cd.estatement_printing_flag,'N')='N' THEN '
Print'


                            WHEN NVL(cd.estatement_printing_flag,'N')='0' THEN '
Print'

                            WHEN NVL(cd.estatement_printing_flag,'N')='1' THEN '
Email'

                            ELSE 'Print'
                            END as dlvryxchnel,
                            cd.phone_number     as noxmbl,
                            cd.name1            as nmxfst,
                            cd.name2            as nmxlst,
                            cd.address1         as drs1xa,

                            cd.address2         as drs2xa,
                            cd.account_no       as account_no,
                            cd.account_number   as account_number,
                            v_prcss_id          as ixprcs,
                            p_prdct_id          as ixprdt
                       FROM DXI_CREDIT_CARD_MSTR_BCC cd
                       ) et
                         ON ((cm.cust_id = et.cust_id ) and (cm.account_no = et.
account_no))


           WHEN MATCHED THEN
           UPDATE SET

                cm.crn              = et.crn,
                cm.account_number   = et.account_number,
                cm.drs1xa           = et.drs1xa,
                cm.drs2xa           = et.drs2xa,
                cm.noxmbl           = et.noxmbl,
                cm.ixem             = et.ixem,
                cm.nmxfst           = et.nmxfst,
                cm.nmxlst           = et.nmxlst,
                cm.dob              = et.dob,
                cm.dlvryxchnel      = et.dlvryxchnel,
                cm.dxmfdxlst        = v_sys_dt,
                cm.bxmfdxlst        = p_crtd_by,
                cm.ixprcs           = et.ixprcs,

                cm.ixprdt           = et.ixprdt
           WHEN NOT MATCHED THEN
                INSERT
                (cm.crn,        cm.cust_id,             cm.ixem,            cm.d
ob,

                 cm.noxmbl,     cm.nmxfst,              cm.nmxlst,          cm.d
rs1xa,

                 cm.drs2xa,     cm.account_number,      cm.account_no,      cm.d
lvryxchnel,

                 cm.dxctd,      cm.bxctd,               cm.ixprcs,          cm.i

xprdt

                )
                VALUES
                (et.crn,        et.cust_id,             et.ixem,            et.d
ob,

                 et.noxmbl,     et.nmxfst,              et.nmxlst,          et.d
rs1xa,

                 et.drs2xa,     et.account_number,      et.account_no,      et.d
lvryxchnel,


                 v_sys_dt,      p_crtd_by,              et.ixprcs,          et.i
xprdt

                );

               v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
               sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'Merge for DXCSTMRXM
From DXI_CREDIT_CARD_MSTR_BCC -> :- '||sqlerrm;

               insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_I
D, P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

        EXCEPTION

            WHEN NO_DATA_FOUND THEN
               sql_stmt:='No Data Found for DXCSTMRXM :- '||sqlerrm;
               insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_I
D, P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

               v_exception_err := -1;
            WHEN OTHERS THEN
               sql_stmt:='EXCEPTION in Merge for DXCSTMRXM From DXI_CREDIT_CARD_
MSTR_BCC :- '||sqlerrm;

               insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_i
d, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));


               v_exception_err := -1;
        END;
        IF v_exception_err = 0 THEN
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL4 = 'DXCSTMRXM Completed' WHERE I
XPRCS = v_prcss_id ;

        ELSE
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL4 = 'DXCSTMRXM Parsing Error' WHE
RE IXPRCS = v_prcss_id ;

        END IF;
        COMMIT;
    END IF;



    IF v_exception_err = 0 THEN
        UPDATE DXPRCSXFLWXDTLS SET STTSXTBL6 = 'DXCSTMRXDTLS FROM Running' WHERE
 IXPRCS = v_prcss_id ;

        COMMIT;
        BEGIN

            CASE
            WHEN p_frqncy = 'D' OR p_frqncy = 'M' THEN

                    INSERT  INTO DXCSTMRXDTLS

                           (
                            ixprcs,
                            dxprcs,
                            ixstmt,
                            dxstmt,
                            ixprdt,
                            dxctd,
                            bxctd,
                            stxstxdt,
                            stxenxdt,
                            strctxfldr,
                            ixcst,
                            noxacnt,

                            drs1xa,
                            drs2xa,
                            noxmbl,
                            ixem,
                            dlvryxchnel,
                            nmxcust,
                            cust_no,
                            cust_ac_no,
                            emailxid,
                            mobilenumber,
                            email_id,
                            mob_no,
                            cust_name,

                            birthxdate
                            )
                    SELECT  /*+ parallel (cd,10) (cm,10) (dm,10)  */
                            v_prcss_id,
                            v_prcss_dt,
                            p_stmt_id,
                            p_stmt_dt,
                            p_prdct_id,
                            v_sys_dt,
                            p_crtd_by,
                            (SELECT to_char(trunc(trunc(to_date(PRINT_DATE,'DD-M
M-YYYY'), 'MM') , 'MM'),'DD-MON-YYYY') stmt_frm_dt FROM STG_CREDIT_CARD_DTLS cc
WHERE cc.ACCOUNT_NO = cd.ACCOUNT_NO AND ROWNUM < 2) as stmt_frm_dt,


                            (SELECT to_char(LAST_DAY(to_char(trunc(trunc(to_date
(PRINT_DATE,'DD-MM-YYYY'), 'MM') , 'MM'),'DD-MON-YYYY')),'DD-MON-YYYY') stmt_to_
dt FROM STG_CREDIT_CARD_DTLS cc WHERE cc.ACCOUNT_NO = cd.ACCOUNT_NO AND ROWNUM <
 2) as stmt_to_dt,

                           '/' as strctxfldr,
                            cm.ixcst,
                            cd.account_no as noxacnt,
                            cm.drs1xa,
                            cm.drs2xa,
                            cm.noxmbl,
                            cm.ixem as ixem,

                            cm.dlvryxchnel,
                            cm.nmxfst as nmxcust,
                            cm.crn,
                            cd.account_number as cust_ac_no,
                            cd.email as emailxid,
                            cd.phone_number as mobilenumber,
                            cd.email as email_id,
                            cd.phone_number as mob_no,
                            cd.name1 || chr(32) || cd.name2 as cust_name,
                            cd.dob as birthxdate
                       FROM DXI_CREDIT_CARD_MSTR_BCC cd
                  LEFT JOIN DXCSTMRXM cm ON cd.customer_number = cm.cust_id
                        AND cd.account_no = cm.account_no;



             END CASE;

               v_sql_cnt := NVL(sql%ROWCOUNT,0);

               v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
               sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'INSERT Into DXCSTMRX
DTLS From DXI_CREDIT_CARD_MSTR_BCC and DXCSTMRXM -> :- '||sqlerrm;

               insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_I
D, P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));


        EXCEPTION
            WHEN NO_DATA_FOUND THEN
               sql_stmt:='No Data Found for DXCSTMRXDTLS :- '||sqlerrm;
               insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_i
d, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

               v_exception_err := -1;
            WHEN OTHERS THEN
               sql_stmt:='EXCEPTION in INSERT into DXCSTMRXDTLS From DXI_CREDIT_
CARD_MSTR_BCC and DXCSTMRXM :- '||sqlerrm;

               insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_i
d, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));


               v_exception_err := -1;
        END;
        IF v_exception_err = 0 THEN
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL6 = 'DXCSTMRXDTLS Completed' WHER
E IXPRCS = v_prcss_id ;

        ELSE
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL6 = 'DXCSTMRXDTLS Parsing Error'
WHERE IXPRCS = v_prcss_id ;

        END IF;
        COMMIT;

    END IF;


    IF v_exception_err = 0  THEN

        UPDATE DXPRCSXFLWXDTLS SET STTSXTBL7 = 'DXI_CREDIT_CARD_DTLS Running' WH
ERE IXPRCS = v_prcss_id ;

        COMMIT;
        BEGIN
            INSERT /*+ append */  INTO DXI_CREDIT_CARD_DTLS
                  (
                    ixprcs,

                    dxprcs,
                    ixstmt,
                    dxstmt,
                    ixprdt,
                    dxctd,
                    bxctd,
                    stxstxdt,
                    stxenxdt,
                    title,
                    cust_name,
                    name_line_2,
                    address1,
                    address2,

                    address3,
                    address4,
                    ach_bank_pcih_page1,
                    acct_pcih_page_1,
                    message1,
                    message2,
                    message3,
                    no_amplop_waybill,
                    account_number,
                    account_no,
                    due_date,
                    credit_limit_1,
                    cash_limit,

                    billing_amount_total,
                    available_credit_limit,
                    available_cash_limit,
                    minimum_payment,
                    print_date,
                    retail_credit_line,
                    cash_credit_line,
                    available_cash_credit_line,
                    available_retail_credit_line,
                    status,
                    credit_limit_2,
                    cash_advance_limit,
                    card_number,

                    block_code,
                    available_credit_limit_cicilan,
                    original_cicilan,
                    previous_balance_bonus_bucks,
                    bucks_used,
                    bonus_bucks_end,
                    bonus_bucks,
                    merchant_name,
                    merchant_city,
                    merchant_state_prov,
                    exchange_rate_1,
                    total_amount,
                    previous_balance_rkk_rupiah,

                    previous_balance_rkk_dollar,
                    transaction_date_rkk_rupiah,
                    transaction_date_rkk_dollar_,
                    transaction_detail_rkk_rupiah,
                    transaction_detail_rkk_dollar,
                    transaction_amount_rkk_rupiah,
                    transaction_amount_rkk_dollar,
                    summary_amount_rkk_rupiah,
                    summary_amount_rkk_dollar,
                    perhitungan_rkk_dollar_summary_in_rupiah,
                    exchange_rate_2,
                    user_message_2_1,
                    user_message_2_2,

                    user_message_2_3,
                    previous_balance_summary,
                    purchase_summary,
                    cash_advance_summary,
                    credit_summary,
                    payment_summary,
                    fees_and_interest_summary,
                    purchase_cash_advance_rate_month,
                    purchase_cash_advance_rate_year,
                    previous_balance_bonus_buck,
                    minimum_amount_due_summary,
                    new_balance_summary,
                    credit_line_transaksi_cicilan,

                    available_credit_line_transaksi_cicilan,
                    name_of_merchant_where_to_do_installment_transactions,
                    cicilan_pokok_yang_belum_tertagih,
                    unbilled_installment_interest,
                    credit_limit_installment,
                    remaining_installment,
                    total_installment_that_have_been_billed,
                    amount_sisa_cicilan,
                    debit_credit,
                    direct_debit_branch_number,
                    direct_debit_account_number,
                    bonus_rupiah_balance,
                    command_for_change_envelop_or_end_of_statement,

                    subtotal_amount,
                    amount_foreign_currency,
                    balance_of_last_month,
                    name_keterangan,
                    primary_card,
                    buck_used,
                    card_type,
                    primary_card_no
                  )
            SELECT  /*+ parallel (cd,10) */
                    v_prcss_id,
                    v_prcss_dt,
                    p_stmt_id,

                    p_stmt_dt,
                    p_prdct_id,
                    v_sys_dt,
                    p_crtd_by,
                    to_char(trunc(trunc(to_date(PRINT_DATE,'DD-MM-YYYY'), 'MM')
, 'MM'),'DD-MON-YYYY') stmt_frm_dt,

                    to_char(LAST_DAY(to_char(trunc(trunc(to_date(PRINT_DATE,'DD-
MM-YYYY'), 'MM') , 'MM'),'DD-MON-YYYY')),'DD-MON-YYYY') stmt_to_dt,

                    title,
                    cust_name,
                    name_line_2,

                    address1,
                    address2,
                    address3,
                    address4,
                    ach_bank_pcih_page1,
                    acct_pcih_page_1,
                    message1,
                    message2,
                    message3,
                    no_amplop_waybill,
                    account_number,
                    account_no,
                    due_date,

                    credit_limit_1,
                    cash_limit,
                    billing_amount_total,
                    available_credit_limit,
                    available_cash_limit,
                    minimum_payment,
                    print_date,
                    retail_credit_line,
                    cash_credit_line,
                    available_cash_credit_line,
                    available_retail_credit_line,
                    status,
                    credit_limit_2,

                    cash_advance_limit,
                    card_number,
                    block_code,
                    available_credit_limit_cicilan,
                    original_cicilan,
                    previous_balance_bonus_bucks,
                    bucks_used,
                    bonus_bucks_end,
                    bonus_bucks,
                    merchant_name,
                    merchant_city,
                    merchant_state_prov,
                    exchange_rate_1,

                    total_amount,
                    previous_balance_rkk_rupiah,
                    previous_balance_rkk_dollar,
                    transaction_date_rkk_rupiah,
                    transaction_date_rkk_dollar_,
                    transaction_detail_rkk_rupiah,
                    transaction_detail_rkk_dollar,
                    transaction_amount_rkk_rupiah,
                    transaction_amount_rkk_dollar,
                    summary_amount_rkk_rupiah,
                    summary_amount_rkk_dollar,
                    perhitungan_rkk_dollar_summary_in_rupiah,
                    exchange_rate_2,

                    user_message_2_1,
                    user_message_2_2,
                    user_message_2_3,
                    previous_balance_summary,
                    purchase_summary,
                    cash_advance_summary,
                    credit_summary,
                    payment_summary,
                    fees_and_interest_summary,
                    purchase_cash_advance_rate_month,
                    purchase_cash_advance_rate_year,
                    previous_balance_bonus_buck,
                    minimum_amount_due_summary,

                    new_balance_summary,
                    credit_line_transaksi_cicilan,
                    available_credit_line_transaksi_cicilan,
                    name_of_merchant_where_to_do_installment_transactions,
                    cicilan_pokok_yang_belum_tertagih,
                    unbilled_installment_interest,
                    credit_limit_installment,
                    remaining_installment,
                    total_installment_that_have_been_billed,
                    amount_sisa_cicilan,
                    debit_credit,
                    direct_debit_branch_number,
                    direct_debit_account_number,

                    bonus_rupiah_balance,
                    command_for_change_envelop_or_end_of_statement,
                    subtotal_amount,
                    amount_foreign_currency,
                    balance_of_last_month,
                    name_keterangan,
                    primary_card,
                    buck_used,
                    card_type,
                    primary_card_no
               FROM STG_CREDIT_CARD_DTLS cd;



               v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
               sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'INSERT Into DXI_CRED
IT_CARD_DTLS From STG_CREDIT_CARD_DTLS -> :- '||sqlerrm;

               insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_I
D, P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
               sql_stmt:='No Data Found for DXI_CREDIT_CARD_DTLS :- '||sqlerrm;
               insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_i
d, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));


               v_exception_err := -1;
            WHEN OTHERS THEN
               sql_stmt:='EXCEPTION in INSERT into DXI_CREDIT_CARD_DTLS From STG
_CREDIT_CARD_DTLS :- '||sqlerrm;

               insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_i
d, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

               v_exception_err := -1;
        END;
        IF v_exception_err = 0 THEN
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL7 = 'DXI_CREDIT_CARD_DTLS Complet
ed' WHERE IXPRCS = v_prcss_id ;


        ELSE
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL7 = 'DXI_CREDIT_CARD_DTLS Parsing
 Error' WHERE IXPRCS = v_prcss_id ;

        END IF;
        COMMIT;
    END IF;

    IF v_exception_err = 0  THEN

        UPDATE DXPRCSXFLWXDTLS SET STTSXTBL8 = 'DXI_CREDIT_CARD_SMRY_DTLS Runnin
g' WHERE IXPRCS = v_prcss_id ;


        COMMIT;
        BEGIN
            INSERT /*+ append */  INTO DXI_CREDIT_CARD_SMRY_DTLS
                  (
                    PREVIOUS_BALANCE_BONUS_BUCKS,
                    BONUS_BUCKS,
                    BUCKS_USED,
                    BONUS_BUCKS_END,
                    PRIMARY_CARD_NOS,
                    CARD_TYPES,
                    IXPRCSS
                  )

            SELECT  /*+ parallel (ct,10)  */
                    TO_CHAR(SUM(REPLACE(PREVIOUS_BALANCE_BONUS_BUCKS,'.','')),'f
m999G999G999G999G999G999G999G999G999G999G999G999G999G999', 'NLS_NUMERIC_CHARACTE
RS = '',.'' NLS_ISO_CURRENCY = Indonesia') AS PREVIOUS_BALANCE_BONUS_BUCKS,

                    TO_CHAR(SUM(REPLACE(BONUS_BUCKS,'.','')),'fm999G999G999G999G
999G999G999G999G999G999G999G999G999G999', 'NLS_NUMERIC_CHARACTERS = '',.'' NLS_I
SO_CURRENCY = Indonesia') AS BONUS_BUCKS,

                    TO_CHAR(SUM(REPLACE(BUCKS_USED,'.','')),'fm999G999G999G999G9
99G999G999G999G999G999G999G999G999G999', 'NLS_NUMERIC_CHARACTERS = '',.'' NLS_IS
O_CURRENCY = Indonesia') AS BUCKS_USED,


                    TO_CHAR(SUM(REPLACE(BONUS_BUCKS_END,'.','')),'fm999G999G999G
999G999G999G999G999G999G999G999G999G999G999', 'NLS_NUMERIC_CHARACTERS = '',.'' N
LS_ISO_CURRENCY = Indonesia') AS BONUS_BUCKS_END,

                    PRIMARY_CARD_NO AS PRIMARY_CARD_NOS,
                    CARD_TYPE AS CARD_TYPES,
                    IXPRCS AS IXPRCSS
               FROM DXI_CREDIT_CARD_DTLS ct
              WHERE IXPRCS = v_prcss_id
           GROUP BY PRIMARY_CARD_NO,CARD_TYPE,IXPRCS ;


               v_pkgpcr_cntr := v_pkgpcr_cntr + 1;

               sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'INSERT Into DXI_CRED
IT_CARD_SMRY_DTLS From DXI_CREDIT_CARD_DTLS -> :- '||sqlerrm;

               insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_I
D, P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
               sql_stmt:='No Data Found for DXI_CREDIT_CARD_SMRY_DTLS :- '||sqle
rrm;

               insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_i
d, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));


               v_exception_err := -1;
            WHEN OTHERS THEN
               sql_stmt:='EXCEPTION in INSERT into DXI_CREDIT_CARD_SMRY_DTLS Fro
m DXI_CREDIT_CARD_DTLS :- '||sqlerrm;

               insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_i
d, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

               v_exception_err := -1;
        END;
        IF v_exception_err = 0 THEN
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL8 = 'DXI_CREDIT_CARD_SMRY_DTLS Co

mpleted' WHERE IXPRCS = v_prcss_id ;

        ELSE
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL8 = 'DXI_CREDIT_CARD_SMRY_DTLS Pa
rsing Error' WHERE IXPRCS = v_prcss_id ;

        END IF;
        COMMIT;
    END IF;


    IF v_exception_err = 0  THEN


        UPDATE DXPRCSXFLWXDTLS SET STTSXTBL9 = 'DXI_CREDIT_CARD_TRNS Running' WH
ERE IXPRCS = v_prcss_id ;

        COMMIT;
        BEGIN
            INSERT /*+ append */  INTO DXI_CREDIT_CARD_TRNS
                  (
                    ixprcs,
                    dxprcs,
                    ixstmt,
                    dxstmt,
                    ixprdt,
                    dxctd,

                    bxctd,
                    stxstxdt,
                    stxenxdt,
                    no_amplop_waybill,
                    account_number,
                    account_no,
                    transaction_date,
                    post_date,
                    total_amount_domestic_currency,
                    transaction_order,
                    card_number,
                    merchant_name,
                    amount_foreign_currency,

                    merchant_city,
                    merchant_state_prov,
                    exchange_rate_1
                  )
            SELECT  /*+ parallel (ct,10)  */
                    v_prcss_id,
                    v_prcss_dt,
                    p_stmt_id,
                    p_stmt_dt,
                    p_prdct_id,
                    v_sys_dt,
                    p_crtd_by,
                   (SELECT to_char(trunc(trunc(to_date(PRINT_DATE,'DD-MM-YYYY'),

 'MM') , 'MM'),'DD-MON-YYYY') stmt_frm_dt FROM STG_CREDIT_CARD_DTLS cd WHERE cd.
ACCOUNT_NO = ct.ACCOUNT_NO AND ROWNUM < 2) as stmt_frm_dt,

                   (SELECT to_char(LAST_DAY(to_char(trunc(trunc(to_date(PRINT_DA
TE,'DD-MM-YYYY'), 'MM') , 'MM'),'DD-MON-YYYY')),'DD-MON-YYYY') stmt_to_dt FROM S
TG_CREDIT_CARD_DTLS cd WHERE cd.ACCOUNT_NO = ct.ACCOUNT_NO AND ROWNUM < 2) as st
mt_to_dt,

                    no_amplop_waybill,
                    account_number,
                    account_no,
                    transaction_date,
                    post_date,

                    total_amount_domestic_currency,
                    transaction_order,
                    card_number,
                    merchant_name,
                    amount_foreign_currency,
                    merchant_city,
                    merchant_state_prov,
                    exchange_rate_1
               FROM STG_CREDIT_CARD_TRNS ct;


               v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
               sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'INSERT Into DXI_CRED

IT_CARD_TRNS From STG_CREDIT_CARD_TRNS -> :- '||sqlerrm;

               insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_I
D, P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
               sql_stmt:='No Data Found for DXI_CREDIT_CARD_TRNS :- '||sqlerrm;
               insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_i
d, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

               v_exception_err := -1;
            WHEN OTHERS THEN

               sql_stmt:='EXCEPTION in INSERT into DXI_CREDIT_CARD_TRNS From STG
_CREDIT_CARD_TRNS :- '||sqlerrm;

               insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_i
d, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

               v_exception_err := -1;
        END;
        IF v_exception_err = 0 THEN
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL9 = 'DXI_CREDIT_CARD_TRNS Complet
ed' WHERE IXPRCS = v_prcss_id ;

        ELSE

            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL9 = 'DXI_CREDIT_CARD_TRNS Parsing
 Error' WHERE IXPRCS = v_prcss_id ;

        END IF;
        COMMIT;
    END IF;



    IF v_exception_err = 0 THEN
        UPDATE DXPRCSXFLWXDTLS SET STTSXTBL10 = 'DXPRDTNXDTLSXM Running' WHERE I
XPRCS = v_prcss_id ;


        COMMIT;
        BEGIN

            PKG_ETL_PRSNG.PROC_DROP_OBJECT('STG_CREDIT_CARD_TRNS_TMP','TBL') ;
            /*
            sql_stmt:= 'CREATE TABLE STG_CREDIT_CARD_TRNS_TMP as
                        SELECT NO_AMPLOP_WAYBILL, ACCOUNT_NUMBER, ACCOUNT_NO, ME
RCHANT_NAME

                          FROM STG_CREDIT_CARD_TRNS
                         WHERE MERCHANT_NAME LIKE ''%BEA%METERAI%''
                      GROUP BY NO_AMPLOP_WAYBILL, ACCOUNT_NUMBER, ACCOUNT_NO, ME
RCHANT_NAME' ;


            */
            sql_stmt:= 'CREATE TABLE STG_CREDIT_CARD_TRNS_TMP as
                        SELECT NO_AMPLOP_WAYBILL, ACCOUNT_NUMBER, ACCOUNT_NO, ME
RCHANT_NAME

                          FROM
                        (SELECT NO_AMPLOP_WAYBILL, ACCOUNT_NUMBER, ACCOUNT_NO, M
ERCHANT_NAME,

                               ROW_NUMBER() OVER (PARTITION BY NO_AMPLOP_WAYBILL
, ACCOUNT_NUMBER, ACCOUNT_NO ORDER BY MERCHANT_NAME DESC) as S_NO


                          FROM STG_CREDIT_CARD_TRNS
                         WHERE MERCHANT_NAME LIKE ''%BEA%METERAI%'' ) tbl
                         WHERE S_NO = 1' ;

            DBMS_OUTPUT.PUT_LINE(sql_stmt);
            EXECUTE IMMEDIATE sql_stmt ;
            sql_stmt:= 'CREATE INDEX IDX_STG_CREDIT_CARD_TRNS_TMP ON STG_CREDIT_
CARD_TRNS_TMP (ACCOUNT_NO) ' ;

            EXECUTE IMMEDIATE sql_stmt ;

        END;


        BEGIN
               INSERT /*+ append */  INTO DXPRDTNXDTLSXM
                     (ixstmt, ixprcs, dxprcs, dxstmt, ixem, ixemxalt,
                      crn, noxacnt, ixprdt, fxerrxgnrtn, dxctd, bxctd, flxchnlxd
lvy, strctxfldr,

                      contactxtype, ixcstxpr, cifxid, cust_category_id, typxcstm
r, stxstxdt, stxenxdt,

                      FXESTAMP, fequency, denomination_amt, NO_AMPLOP_WAYBILL, P
RIMARY_CARD_NO, CARD_TYPE

                      )

               SELECT ixstmt, ixprcs, dxprcs, dxst, ixem, ixemxalt,
                      crn, noxacnt, ixprdt, stmtgenflag, dxctd, bxctd, flxchnlxd
lvy, strctxfldr,

                      contactxtype, ixcstxpr, cifxid,cust_category_id, typxcstmr
, stxstxdt, stxenxdt,

                      FXESTAMP, fequency, denomination_amt, NO_AMPLOP_WAYBILL, P
RIMARY_CARD_NO, CARD_TYPE

                 FROM (SELECT /*+ parallel (cm,10) (cd,10) */
                               p_stmt_id as ixstmt,
                               v_prcss_id as ixprcs,

                               v_prcss_dt as dxprcs,
                               p_stmt_dt as  dxst,
                               cd.ixem ixem,
                               --cd.ixemxalt as ixemxalt,
                               NULL as ixemxalt,
                               cd.noxacnt as crn,
                               cd.noxacnt as noxacnt,
                               p_prdct_id as ixprdt,
                               'N' as stmtgenflag,
                               v_sys_dt  as dxctd,
                               p_crtd_by as bxctd,
                               cd.dlvryxchnel as flxchnlxdlvy,
                               cd.strctxfldr  as strctxfldr,

                               cd.contactxtype,
                               CASE WHEN cm.dlvryxchnel = 'Email' THEN cm.crn ||
'_'|| cm.typxcstmr ELSE NULL END as emailxname,

                               CASE WHEN cm.dlvryxchnel = 'Print' THEN cm.crn ||
'_'|| cm.typxcstmr ELSE NULL END as printxname,

                               cm.ixcst as ixcstxpr,
                               cm.cust_id as cifxid,
                               cm.cust_category_id,
                               cm.typxcstmr,
                               cd.stxstxdt,
                               cd.stxenxdt,

                               CASE WHEN td.MERCHANT_NAME LIKE '%BEA%METERAI%' T
HEN 'Y' ELSE 'N' END as  FXESTAMP,

                               p_frqncy as fequency,
                               cdd.BILLING_AMOUNT_TOTAL as denomination_amt,
                               cdd.NO_AMPLOP_WAYBILL,
                               cdd.PRIMARY_CARD_NO,
                               cdd.CARD_TYPE
                          FROM STG_CREDIT_CARD_DTLS cdd
                          JOIN DXCSTMRXM cm
                            ON cdd.ACCOUNT_NO = cm.ACCOUNT_NO
                          JOIN DXCSTMRXDTLS cd
                            ON cm.ixcst  = cd.ixcst

                           AND cm.cust_id = cd.cust_no
                          JOIN STG_CREDIT_CARD_MSTR_BCC mb      -- Added on 19-A
PR-2024 By Ashwini Kumar

                            ON mb.CUSTOMER_NUMBER = cm.CUST_ID  -- Added on 19-A
PR-2024 By Ashwini Kumar

                           AND mb.ACCOUNT_NO = cm.ACCOUNT_NO    -- Added on 19-A
PR-2024 By Ashwini Kumar

                     LEFT JOIN STG_CREDIT_CARD_TRNS_TMP td
                            ON cdd.ACCOUNT_NO = td.ACCOUNT_NO
                         WHERE cd.ixprdt = p_prdct_id

                           AND cd.ixprcs = v_prcss_id
                           AND cdd.PRIMARY_CARD = 1
                             )pd  ;

               v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
               sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'Insert for DXPRDTNXD
TLSXM (Production Details) -> :- '||sqlerrm;

               insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_I
D, P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

        EXCEPTION
            WHEN NO_DATA_FOUND THEN

               sql_stmt:='No Data Found for DXPRDTNXDTLSXM :- '||sqlerrm;
               insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_i
d, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

               v_exception_err := -1;
            WHEN OTHERS THEN
               sql_stmt:='EXCEPTION in INSERT into DXPRDTNXDTLSXM :- '||sqlerrm;


               insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_i
d, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

               v_exception_err := -1;

        END;
        COMMIT;
    END IF;

    IF v_exception_err = 0 THEN
        BEGIN
        -- Selecting DXPRDTNXDTLSXM

            SELECT COUNT (DISTINCT(CRN)) INTO v_ttl_accnt_prsd
              FROM DXPRDTNXDTLSXM
             WHERE IXPRCS = v_prcss_id ;

            SELECT COUNT(FXESTAMP) INTO v_total_estamp_cnt

              FROM DXPRDTNXDTLSXM
             WHERE IXPRCS = v_prcss_id
               AND FXESTAMP ='Y';

            SELECT COUNT(FXSNTXEM) INTO v_total_email_estamp_cnt
              FROM DXPRDTNXDTLSXM
             WHERE IXPRCS = v_prcss_id
               AND FXESTAMP ='Y'
               AND FXSNTXEM ='Y';

            SELECT COUNT(FXPRNTXSTMT) INTO v_total_print_estmp_cnt
              FROM DXPRDTNXDTLSXM
             WHERE IXPRCS = v_prcss_id

               AND FXESTAMP ='Y'
               AND FXPRNTXSTMT ='Y';


            v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
            sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'SELECT COUNT (DISTINCT(
CRN)) AND COUNT(FXESTAMP) FROM DXPRDTNXDTLSXM (Production Details) -> :- '|| NVL
(v_ttl_accnt_prsd,0) || CHR(32) ||sqlerrm;

            insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_ID,
P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

        EXCEPTION

            WHEN NO_DATA_FOUND THEN
                sql_stmt:='No Data Found for SELECT COUNT (DISTINCT(CRN)) AND CO
UNT(FXESTAMP) FROM DXPRDTNXDTLSXM :- '||sqlerrm;

                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
            WHEN OTHERS THEN
                sql_stmt:='EXCEPTION in SELECT COUNT (DISTINCT(CRN)) AND COUNT(F
XESTAMP) FROM DXPRDTNXDTLSXM :- '||sqlerrm;

                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_

id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
        END;
        IF v_exception_err = 0 THEN
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL10 = 'DXPRDTNXDTLSXM Completed' W
HERE IXPRCS = v_prcss_id ;

        ELSE
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL10 = 'DXPRDTNXDTLSXM Parsing Erro
r' WHERE IXPRCS = v_prcss_id ;

        END IF;

        COMMIT;
    END IF;


    IF v_exception_err = 0 THEN
        BEGIN
        -- Updating CXPRCSXDTLS
        SYS.DBMS_STATS.GATHER_TABLE_STATS (OwnName => v_schema, TabName => 'CXPR
CSXDTLS', Estimate_Percent => DBMS_STATS.AUTO_SAMPLE_SIZE , Method_Opt => 'FOR A
LL COLUMNS SIZE AUTO');


        UPDATE CXPRCSXDTLS

           SET ACNTXTTL = NVL(v_ttl_accnt,0),
               PRSDXACNTXTTL = NVL(v_ttl_accnt_prsd,0) ,
               MSDXACNTXTTL = NVL(v_ttl_accnt,0) - NVL(v_ttl_accnt_prsd,0),
               EDXPRSXTM = SYSDATE,
               DXMFDXLST = SYSDATE,
               TOTAL_ESTAMP_CNT = v_total_estamp_cnt,
               TOTAL_EMAIL_ESTAMP_CNT = v_total_email_estamp_cnt,
               TOTAL_PRINT_ESTMP_CNT = v_total_print_estmp_cnt
         WHERE IXPRCS    = v_prcss_id ;

            v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
            sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'UPDATE CXPRCSXDTLS ACNT
XTTL -> :- '|| NVL(v_ttl_accnt_prsd,0) || CHR(32) ||sqlerrm;


            insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_ID,
P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                sql_stmt:='No Data Found for Update CXPRCSXDTLS :- '||sqlerrm;
                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
            WHEN OTHERS THEN
                sql_stmt:='EXCEPTION in Update for CXPRCSXDTLS :- '||sqlerrm;

                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
        END;
        IF v_exception_err = 0 THEN
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL2 = 'CXPRCSXDTLS Completed' WHERE
 IXPRCS = v_prcss_id ;

        ELSE
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL2 = 'CXPRCSXDTLS Parsing Error' W
HERE IXPRCS = v_prcss_id ;


        END IF;
        COMMIT;
    END IF;

    IF v_exception_err = 0 THEN
        UPDATE DXPRCSXFLWXDTLS SET STTSXTBL11 = 'PKG_ETL_PRSNG_CC.PROC_REBLD_IDX
 Running' WHERE IXPRCS = v_prcss_id ;

        COMMIT;
        BEGIN
            /*******************************************************************
********


             *  Collecting Optimizer Statistics Procedure
             *******************************************************************
********/


            PKG_ETL_PRSNG_CC.PROC_REBLD_IDX;

            v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
            sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'Execution of PKG_ETL_PR
SNG_CC.PROC_REBLD_IDX -> :- '||sqlerrm;

            insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_ID,
P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));



        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                sql_stmt:='PKG_ETL_PRSNG_CC.PROC_REBLD_IDX :- '||sqlerrm;
                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
            WHEN OTHERS THEN
                sql_stmt:='PKG_ETL_PRSNG_CC.PROC_REBLD_IDX :- '||sqlerrm;
                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));


                v_exception_err := -1;
        END;
        IF v_exception_err = 0 THEN
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL11 = 'PKG_ETL_PRSNG_CC.PROC_REBLD
_IDX Completed' WHERE IXPRCS = v_prcss_id ;

        ELSE
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL11 = 'PKG_ETL_PRSNG_CC.PROC_REBLD
_IDX Parsing Error' WHERE IXPRCS = v_prcss_id ;

        END IF;
        COMMIT;

    END IF;

    IF v_exception_err = 0 THEN
        UPDATE DXPRCSXFLWXDTLS SET STTSXTBL12 = 'PKG_ADSRV.PROC_PRMTNL_MKTUPD Ru
nning' WHERE IXPRCS = v_prcss_id ;

        COMMIT;
        BEGIN
            /*******************************************************************
********

             *  Marketing Rule Update Procedure
             *******************************************************************

********/

            PKG_ADSRV.PROC_PRMTNL_MKTUPD(v_prcss_id, p_stmtv_dt, p_prdct_id, p_s
tmt_id);


            v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
            sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'Execution of PKG_ADSRV.
PROC_PRMTNL_MKTUPD -> :- '||sqlerrm;

            insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_ID,
P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));



        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                sql_stmt:='PKG_ADSRV.PROC_PRMTNL_MKTUPD :- '||sqlerrm;
                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
            WHEN OTHERS THEN
                sql_stmt:='PKG_ADSRV.PROC_PRMTNL_MKTUPD :- '||sqlerrm;
                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));


                v_exception_err := -1;
        END;
        IF v_exception_err = 0 THEN
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL12 = 'PKG_ADSRV.PROC_PRMTNL_MKTUP
D Completed' WHERE IXPRCS = v_prcss_id ;

        ELSE
            UPDATE DXPRCSXFLWXDTLS SET STTSXTBL12 = 'PKG_ADSRV.PROC_PRMTNL_MKTUP
D Parsing Error' WHERE IXPRCS = v_prcss_id ;

        END IF;
        COMMIT;
    END IF;



END IF;
COMMIT;



    IF v_exception_err = 0 THEN
        BEGIN
        -- Updating Process Master After Successful Completation of Parsing

            UPDATE CXPRCSXM SET FXPRCSXPRS = 'C', EDXDT = SYSDATE
             WHERE IXSTMT = p_stmt_id

               AND IXPRDT = p_prdct_id
               AND FXPRCSXPRS = 'R'
               AND IXPRCS = v_prcss_id;

            v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
            sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'PARSING PROCESS COMPLET
ED -> :- '||sqlerrm;

            insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_ID,
P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

    EXCEPTION
        WHEN NO_DATA_FOUND THEN

            sql_stmt:='No Data Found for CXPRCSXM :- '||sqlerrm;
            insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_id,
p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

            v_exception_err := -1;
        WHEN OTHERS THEN
            sql_stmt:='EXCEPTION in Insert for CXPRCSXM :- '||sqlerrm;
            insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_id,
p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

            v_exception_err := -1;
        END;
        COMMIT;

    END IF;
    COMMIT;


    IF v_exception_err = -1 THEN

        BEGIN
        -- After Completation of Parsing
        -- Updating Process Master Parsing COMPLETION or ERROR Flag in Process M
aster --


            UPDATE CXPRCSXM SET FXPRCSXPRS = 'E', EDXDT = SYSDATE

             WHERE IXSTMT = p_stmt_id
               AND IXPRDT = p_prdct_id
               AND FXPRCSXPRS = 'R'
               AND IXPRCS = v_prcss_id;

                v_pkgpcr_cntr := v_pkgpcr_cntr + 1;
                sql_stmt:= '('||v_pkgpcr_cntr||v_pkgpcr_nm||'ERROR FOUND - INCOM
PLETE PARSING PROCESS -> :- '||sqlerrm;

                insert into DXPRCXERRXDTLS values(V_PRCSS_ID, V_PRCSS_DT,P_STMT_
ID, P_STMT_DT,P_PRDCT_ID,SQL_STMT,TO_CHAR(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

        EXCEPTION

            WHEN NO_DATA_FOUND THEN
                sql_stmt:='No Data Found for CXPRCSXM :- '||sqlerrm;
                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

                v_exception_err := -1;
            WHEN OTHERS THEN
                sql_stmt:='EXCEPTION in Insert for CXPRCSXM - ERROR FOUND :- '||
sqlerrm;

                insert into DXPRCXERRXDTLS values(v_prcss_id, v_prcss_dt,p_stmt_
id, p_stmt_dt,p_prdct_id,sql_stmt,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));


                v_exception_err := -1;
        END;
    END IF;
    COMMIT;

   v_end_dt := SYSDATE;

   IF v_exception_err = 0 THEN
       UPDATE DXPRCSXFLWXDTLS SET STTSXTBL1 = 'CXPRCSXM Completed', DXCMPLTXPRCS
 = v_end_dt  WHERE IXPRCS = v_prcss_id ;

   ELSE
       UPDATE DXPRCSXFLWXDTLS SET STTSXTBL1 = 'CXPRCSXM Error All', DXCMPLTXPRCS

 = v_end_dt  WHERE IXPRCS = v_prcss_id ;

   END IF;

   DBMS_OUTPUT.PUT_LINE('Start Date and Time  :- ' || to_char(v_start_dt,'DD-MM-
YYYY HH:MI:SS AM'));

   DBMS_OUTPUT.PUT_LINE('End   Date and Time  :- ' || to_char(v_end_dt,'DD-MM-YY
YY HH:MI:SS AM'));

   COMMIT;

END;





PROCEDURE PROC_REBLD_IDX
AS
sql_stmt    VARCHAR2 (32767);
v_schema    VARCHAR2 (100);
index_name  VARCHAR2(100);
CURSOR cur_tbl IS SELECT table_name FROM user_tables
            Where Table_Name
               in ( 'STG_CREDIT_CARD_DTLS',
                    'STG_CREDIT_CARD_TRNS',

                    'STG_CREDIT_CARD_MSTR_BCC',
                    'DXI_CREDIT_CARD_DTLS',
                    'DXI_CREDIT_CARD_TRNS',
                    'CXPRCSXDTLS',
                    'CXPRCSXM',
                    'DXCSTMRXDTLS',
                    'DXCSTMRXM',
                    'DXPRDTNXDTLSXM',
                    'PXMXC');
tbl_rec            cur_tbl%ROWTYPE;
CURSOR cur_idx IS SELECT index_name FROM user_indexes
            WHERE table_owner = v_schema
              AND index_name NOT LIKE 'SYS_%'

              And Table_Name
               in ( 'STG_CREDIT_CARD_DTLS',
                    'STG_CREDIT_CARD_TRNS',
                    'STG_CREDIT_CARD_MSTR_BCC',
                    'DXI_CREDIT_CARD_DTLS',
                    'DXI_CREDIT_CARD_TRNS',
                    'CXPRCSXDTLS',
                    'CXPRCSXM',
                    'DXCSTMRXDTLS',
                    'DXCSTMRXM',
                    'DXPRDTNXDTLSXM',
                    'PXMXC');
idx_rec            cur_idx%ROWTYPE;


BEGIN
  /*****************************************************************************
**

   * This section is for Selection of SCHEMA Name into v_schema
   *****************************************************************************
**/

    BEGIN

        SELECT sys.LOGIN_USER() INTO v_schema from dual;


    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            sql_stmt:='No Data Found for sys.LOGIN_USER() :- '||sqlerrm;
            insert into DXPRCXERRXDTLS values(NULL, NULL,NULL, NULL,NULL,sql_stm
t,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

        WHEN OTHERS THEN
            sql_stmt:='EXCEPTION in Select for sys.LOGIN_USER() :- '||sqlerrm;
            insert into DXPRCXERRXDTLS values(NULL, NULL,NULL, NULL,NULL,sql_stm
t,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));


        COMMIT;

    END;

   BEGIN

  /*****************************************************************************
**

   * Delete_table_stats And Gather_table_stats
   *****************************************************************************
**/

     OPEN cur_tbl;
     LOOP

     FETCH cur_tbl INTO tbl_rec;
     EXIT WHEN cur_tbl%NOTFOUND;
          SYS.DBMS_STATS.GATHER_TABLE_STATS (OwnName => v_schema, TabName => tbl
_rec.table_name, Estimate_Percent => DBMS_STATS.AUTO_SAMPLE_SIZE , Method_Opt =>
 'FOR ALL COLUMNS SIZE AUTO');

     END LOOP;
     CLOSE cur_tbl;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            sql_stmt:='No Data Found for Delete_table_stats And Gather_table_sta
ts :- '||sqlerrm;


            insert into DXPRCXERRXDTLS values(NULL, NULL,NULL, NULL,NULL,sql_stm
t,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

        WHEN CURSOR_ALREADY_OPEN THEN
            CLOSE cur_tbl;
        WHEN OTHERS THEN
            sql_stmt:='EXCEPTION for Delete_table_stats And Gather_table_stats :
- '||sqlerrm;

            insert into DXPRCXERRXDTLS values(NULL, NULL,NULL, NULL,NULL,sql_stm
t,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));



   END;
   COMMIT;

   BEGIN

  /*****************************************************************************
**

   * Gathering Stats for Indexes;
   *****************************************************************************
**/


     OPEN cur_idx;
     LOOP
     FETCH cur_idx INTO idx_rec;
     EXIT WHEN cur_idx%NOTFOUND;
        SYS.DBMS_STATS.GATHER_INDEX_STATS (OwnName => v_schema, IndName => idx_r
ec.index_name, Estimate_Percent => SYS.DBMS_STATS.AUTO_SAMPLE_SIZE, Degree => 4,
 No_Invalidate => FALSE);

     END LOOP;
     CLOSE cur_idx;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN

            sql_stmt:='No Data Found for Gathering Stats for Indexes :- '||sqler
rm;

            insert into DXPRCXERRXDTLS values(NULL, NULL,NULL, NULL,NULL,sql_stm
t,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));

        WHEN CURSOR_ALREADY_OPEN THEN
            CLOSE cur_idx;
        WHEN OTHERS THEN
            sql_stmt:='EXCEPTION in Gathering Stats for Indexes :- '||sqlerrm;
            insert into DXPRCXERRXDTLS values(NULL, NULL,NULL, NULL,NULL,sql_stm
t,to_char(sysdate,'DD-MM-YYYY HH:MI:SS AM'));




   END;

  COMMIT;

END;


END;

